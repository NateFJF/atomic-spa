{
    "pipes": [],
    "interfaces": [
        {
            "name": "FilterTab",
            "id": "interface-FilterTab-a1376b3a49e75eab1f5e837997d95d56177495977b8600f3b89f7f9f04e2778fd07fd73f61224eb381370a8d96ab3c47651482da1a2169d90005e0830bc55742",
            "file": "src/app/components/molecules/filterTabGroup/filterTabGroup.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FilterTabButtonComponent } from '../../atoms/filterTabButton/filterTabButton.component';\n\nexport interface FilterTab {\n  label: string;\n  count: number;\n  state: string;\n}\n\n@Component({\n  selector: 'app-tab-group',\n  standalone: true,\n  imports: [CommonModule, FilterTabButtonComponent, FilterTabButtonComponent],\n  templateUrl: './filterTabGroup.component.html',\n  styleUrls: ['./filterTabGroup.component.scss'],\n})\nexport class TabGroupComponent {\n\n  // --------------------------- Properties --------------------------\n  // Input properties\n  @Input() tabs: FilterTab[] = [];\n  @Input() selectedTab: string = '';\n\n  // Output properties\n  @Output() tabSelected = new EventEmitter<string>();\n\n  // --------------------------- Handlers --------------------------\n\n  onSelectTab(state: string) {\n    this.tabSelected.emit(state);\n    this.selectedTab = state;\n  }\n}\n",
            "properties": [
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FilterTab",
            "id": "interface-FilterTab-59fc373828b191fc4c64853e9c6255eb49c61dca9f65a884ad91582a1fde4c1fed0b2deeee753a89232ad1f31aa9793a51ef6eefb26b52afd65c7b569ffaf7fb-1",
            "file": "src/app/components/organisms/filterActionGroup/filterActionGroup.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TabGroupComponent } from '../../molecules/filterTabGroup/filterTabGroup.component';\r\nimport { ActionBarComponent } from '../../molecules/actionBar/actionBar.component';\r\n\r\nexport interface FilterTab {\r\n  label: string;\r\n  count: number;\r\n  state: string;\r\n  active?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-filter-action-group',\r\n  standalone: true,\r\n  imports: [CommonModule, TabGroupComponent, ActionBarComponent],\r\n  templateUrl: './filterActionGroup.component.html',\r\n  styleUrls: ['./filterActionGroup.component.scss'],\r\n})\r\n\r\nexport class FilterActionGroupComponent {\r\n\r\n  // --------------------------- Properties --------------------------\r\n  // Input properties\r\n  @Input() tabs: FilterTab[] = [];\r\n  @Input() selectedTab: string = '';\r\n\r\n  // Output properties\r\n  @Output() tabChanged = new EventEmitter<string>();\r\n  @Output() exportClicked = new EventEmitter<void>();\r\n  @Output() filterClicked = new EventEmitter<void>();\r\n\r\n  // --------------------------- Handlers --------------------------\r\n\r\n  handleTabChange(tab: string) {\r\n    this.tabChanged.emit(tab);\r\n  }\r\n\r\n  handleExport() {\r\n    this.exportClicked.emit();\r\n  }\r\n\r\n  handleFilter() {\r\n    this.filterClicked.emit();\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "FilterTab-1"
        },
        {
            "name": "NavTabItem",
            "id": "interface-NavTabItem-0995d1f3925c054c28cb14a4fdfdfbd297d9d021cca0229cbfdc2f335a16291f7da762ea90d5e54540b629ea56fdcc9ac3e4966894bc7586c11d818e290c1b12",
            "file": "src/app/components/organisms/navTabGroup/navTabGroup.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NavTabComponent } from '../../molecules/navTab/navTab.component';\n\nexport interface NavTabItem {\n  label: string;\n  icon: string;\n  route: string;\n  active?: boolean;\n}\n\n@Component({\n  selector: 'app-nav-tab-group',\n  standalone: true,\n  imports: [CommonModule, NavTabComponent],\n  templateUrl: './navTabGroup.component.html',\n  styleUrls: ['./navTabGroup.component.scss'],\n})\nexport class NavTabGroupComponent {\n\n  // --------------------------- Properties --------------------------\n  // Input properties\n  @Input() tabs: NavTabItem[] = [];\n}\n",
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "StatCardItem",
            "id": "interface-StatCardItem-9f209766bfd1854dfecd69fc0c4c48590d3af666d3a17942aabfa7db675bde07275b165f5c9eb2df597559d2eac63fe918604f74d80a715d9665877eed6c474c",
            "file": "src/app/components/organisms/statCardGroup/statCardGroup.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StatCardComponent } from '../../molecules/statCard/statCard.component';\n\nexport interface StatCardItem {\n  count: number | string;\n  label: string;\n  icon: string;\n}\n\n@Component({\n  selector: 'app-stat-card-group',\n  standalone: true,\n  imports: [CommonModule, StatCardComponent],\n  templateUrl: './statCardGroup.component.html',\n  styleUrls: ['./statCardGroup.component.scss'],\n})\nexport class StatCardGroupComponent {\n\n  // --------------------------- Properties --------------------------\n  // Input properties\n  @Input() cards: StatCardItem[] = [];\n\n  // Output properties\n  // No output properties defined for this component\n}\n",
            "properties": [
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TableRow",
            "id": "interface-TableRow-028bb2b3b261944480c05cc7664d6be5e5032d941f3e3fa0322aa197f8627d9817c09614dd5504768e45f00c15e5d4ed9ff4955a11a38385120dee4ef27b5e8f",
            "file": "src/app/services/tableData.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n// TableRow interface defines the structure of each row in the table.\nexport interface TableRow {\n  id: number;\n  state: string;\n  fileNumber: number;\n  selected?: boolean;\n}\n\n// Key for sorting the table data.\nexport type SortDirection = 'asc' | 'desc';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class TableDataService {\n  constructor() {}\n\n  // Filters the table data based on the selected state.\n  filterByState(data: TableRow[], state: string | null): TableRow[] {\n    if (!state || state === 'total') return data;\n    return data.filter(row => row.state.toLowerCase() === state.toLowerCase());\n  }\n\n  // Sorts the table data by file number in the specified direction.\n  sortByFileNumber(data: TableRow[], direction: SortDirection): TableRow[] {\n    return [...data].sort((a, b) => {\n      const diff = a.fileNumber - b.fileNumber;\n      return direction === 'asc' ? diff : -diff;\n    });\n  }\n\n  // Exports the table data to a CSV format.\n  exportToCSV(data: TableRow[]): string {\n    const headers = ['State', 'File number'];\n    const rows = data.map(row => [row.state, row.fileNumber]);\n    const csvContent = [headers, ...rows]\n      .map(row => row.map(val => `\"${val}\"`).join(','))\n      .join('\\n');\n\n    return csvContent;\n  }\n\n  // Downloads the CSV data as a .csv file.\n  downloadCSV(csvData: string, filename = 'export.csv'): void {\n    const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n\n    link.href = url;\n    link.setAttribute('download', filename);\n    link.click();\n\n    URL.revokeObjectURL(url);\n  }\n}\n",
            "properties": [
                {
                    "name": "fileNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TableRowData",
            "id": "interface-TableRowData-4895397fd9da9f433f7c26dd89faa8b8a3258abb5e732a283c9c0ba7bb90d36c1920b6bc6f33dbd6e5c8416232b7c9a27a28a83d91b08907d5b61c3f7ea64bcf",
            "file": "src/app/components/organisms/tableRowGroup/tableRowGroup.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TableRowComponent } from '../../molecules/tableRow/tableRow.component';\n\nexport interface TableRowData {\n  id: number;\n  state: string;\n  fileNumber: number;\n  selected?: boolean;\n}\n\n@Component({\n  selector: 'app-table-row-group',\n  standalone: true,\n  imports: [CommonModule, TableRowComponent],\n  templateUrl: './tableRowGroup.component.html',\n  styleUrls: ['./tableRowGroup.component.scss'],\n})\n\nexport class TableRowGroupComponent {\n\n  // --------------------------- Properties --------------------------\n  // Input properties\n  @Input() rows: TableRowData[] = [];\n\n  // Output properties\n  @Output() rowSelected = new EventEmitter<{ id: string | number; selected: boolean }>();\n  @Output() consultClicked = new EventEmitter<string | number>();\n\n  // --------------------------- Handlers ---------------------------\n\n  handleSelectChange(id: string | number, checked: boolean): void {\n    this.rowSelected.emit({ id, selected: checked });\n  }\n\n  handleConsultClick(id: string | number) {\n    this.consultClicked.emit(id);\n  }\n}\n",
            "properties": [
                {
                    "name": "fileNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "TableDataService",
            "id": "injectable-TableDataService-028bb2b3b261944480c05cc7664d6be5e5032d941f3e3fa0322aa197f8627d9817c09614dd5504768e45f00c15e5d4ed9ff4955a11a38385120dee4ef27b5e8f",
            "file": "src/app/services/tableData.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "downloadCSV",
                    "args": [
                        {
                            "name": "csvData",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filename",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'export.csv'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "csvData",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filename",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'export.csv'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportToCSV",
                    "args": [
                        {
                            "name": "data",
                            "type": "TableRow[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "TableRow[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterByState",
                    "args": [
                        {
                            "name": "data",
                            "type": "TableRow[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TableRow[]",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "TableRow[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortByFileNumber",
                    "args": [
                        {
                            "name": "data",
                            "type": "TableRow[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "direction",
                            "type": "SortDirection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TableRow[]",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "TableRow[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "direction",
                            "type": "SortDirection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n// TableRow interface defines the structure of each row in the table.\nexport interface TableRow {\n  id: number;\n  state: string;\n  fileNumber: number;\n  selected?: boolean;\n}\n\n// Key for sorting the table data.\nexport type SortDirection = 'asc' | 'desc';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class TableDataService {\n  constructor() {}\n\n  // Filters the table data based on the selected state.\n  filterByState(data: TableRow[], state: string | null): TableRow[] {\n    if (!state || state === 'total') return data;\n    return data.filter(row => row.state.toLowerCase() === state.toLowerCase());\n  }\n\n  // Sorts the table data by file number in the specified direction.\n  sortByFileNumber(data: TableRow[], direction: SortDirection): TableRow[] {\n    return [...data].sort((a, b) => {\n      const diff = a.fileNumber - b.fileNumber;\n      return direction === 'asc' ? diff : -diff;\n    });\n  }\n\n  // Exports the table data to a CSV format.\n  exportToCSV(data: TableRow[]): string {\n    const headers = ['State', 'File number'];\n    const rows = data.map(row => [row.state, row.fileNumber]);\n    const csvContent = [headers, ...rows]\n      .map(row => row.map(val => `\"${val}\"`).join(','))\n      .join('\\n');\n\n    return csvContent;\n  }\n\n  // Downloads the CSV data as a .csv file.\n  downloadCSV(csvData: string, filename = 'export.csv'): void {\n    const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n\n    link.href = url;\n    link.setAttribute('download', filename);\n    link.click();\n\n    URL.revokeObjectURL(url);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "ActionBarComponent",
            "id": "component-ActionBarComponent-95d6fee57cd875fec7c13451c088f7f9f8e6b95b9696f55a864e28f9dfa9fcfafaad701259d84bfbc8f831e3c1bfd882a6b0ec46089585744d76a6a6376223fb",
            "file": "src/app/components/molecules/actionBar/actionBar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-action-bar",
            "styleUrls": [
                "./actionBar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./actionBar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "exportClicked",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                },
                {
                    "name": "filterClicked",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onExportClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFilterClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonComponent } from '../../atoms/button/button.component';\n\n@Component({\n  selector: 'app-action-bar',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  templateUrl: './actionBar.component.html',\n  styleUrls: ['./actionBar.component.scss'],\n})\nexport class ActionBarComponent {\n\n  // --------------------------- Outputs --------------------------\n  // Emitters for export and filter actions\n  @Output() exportClicked = new EventEmitter<void>();\n  @Output() filterClicked = new EventEmitter<void>();\n\n  // --------------------------- Handlers --------------------------\n\n  onExportClick() {\n    this.exportClicked.emit();\n  }\n\n  onFilterClick() {\n    this.filterClicked.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".action-bar {\r\n  display: flex;\r\n  gap: 0.5rem; // more natural spacing between buttons\r\n  align-items: center;\r\n\r\n  app-button {\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    // ensures icons follow text colour\r\n    app-icon, mat-icon {\r\n      color: inherit;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./actionBar.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"action-bar\">\n  <app-button\n    label=\"Filters\"\n    icon=\"filter_list\"\n    iconPosition=\"end\"\n    variant=\"secondary\"\n    (click)=\"onFilterClick()\"\n    borderRadius=\"9999px\"\n    width=\"auto\"\n    height=\"35px\"\n    fontSize=\"14px\"\n\n  />\n\n  <app-button\n    label=\"Export\"\n    icon=\"download\"\n    iconPosition=\"start\"\n    variant=\"primary\"\n    (click)=\"onExportClick()\"\n    borderRadius=\"8px\"\n    width=\"auto\"\n    height=\"35px\"\n    fontSize=\"14px\"\n  />\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-7b7694f8b61a0dc681b260b216b2fe92e0b7bdec0cf149d7b299b52c7133fc5c22afa9ade6006f083571c20f7a82b93f798ed342f043db55c3cdf970d95d8bc2",
            "file": "src/app/app.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.scss"
            ],
            "styles": [],
            "template": "<div class=\"layout-wrapper\">\n  <app-nav-tab-group [tabs]=\"navTabs\" />\n  <router-outlet />\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "navTabs",
                    "defaultValue": "[\r\n    { label: 'Today', icon: 'calendar_today', route: '/' },\r\n    { label: 'Job done', icon: 'check', route: '/done' },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "NavTabGroupComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { NavTabGroupComponent } from './components/organisms/navTabGroup/navTabGroup.component';\r\nimport { Title } from '@angular/platform-browser';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [RouterOutlet, NavTabGroupComponent],\r\n  styleUrls: ['./app.scss'],\r\n  template: `\r\n    <div class=\"layout-wrapper\">\r\n      <app-nav-tab-group [tabs]=\"navTabs\" />\r\n      <router-outlet />\r\n    </div>\r\n  `,\r\n})\r\nexport class AppComponent {\r\n  navTabs = [\r\n    { label: 'Today', icon: 'calendar_today', route: '/' },\r\n    { label: 'Job done', icon: 'check', route: '/done' },\r\n  ];\r\n\r\n  constructor(private titleService: Title) {}\r\n\r\n  ngOnInit(): void {\r\n    this.titleService.setTitle('Job Done | My App');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".layout-wrapper {\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #f5f5f5;\r\n  min-height: 100vh;\r\n  padding: 1rem;\r\n\r\n}\r\n\r\napp-nav-tab-group {\r\n  margin-left: 2rem;\r\n  margin-right: 2rem;\r\n}\r\n",
                    "styleUrl": "./app.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": []
        },
        {
            "name": "BadgeComponent",
            "id": "component-BadgeComponent-479232ddcb36e0ca9fa3e9d458a8f310abe57b00d355a9b83480f27672273388743db9888d0bef0bf5a524321bd61a47bcbb4c8ecae869fcc9b8d0267a795f0a",
            "file": "src/app/components/atoms/badge/badge.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-badge",
            "styleUrls": [
                "./badge.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./badge.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "fontSize",
                    "defaultValue": "'0.875rem'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "fontWeight",
                    "defaultValue": "'500'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "'20px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "\"default\" | \"info\" | \"success\" | \"warning\" | \"danger\"",
                    "decorators": []
                },
                {
                    "name": "width",
                    "defaultValue": "'auto'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-badge',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './badge.component.html',\n  styleUrls: ['./badge.component.scss'],\n})\nexport class BadgeComponent {\n\n  // --------------------------- Properties --------------------------\n  // Input properties\n  @Input() label: string = '';\n  @Input() variant: 'default' | 'info' | 'success' | 'warning' | 'danger' = 'default';\n  @Input() fontSize: string = '0.875rem';\n  @Input() fontWeight: string = '500';\n  @Input() height: string = '20px'; // Default height\n  @Input() width: string = 'auto'; // Default width\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".badge {\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 6px;\r\n  text-align: center;\r\n  white-space: nowrap;\r\n  box-sizing: border-box;\r\n  padding: 0 0.75rem; // Horizontal padding only, height is controlled via input\r\n\r\n  &.default {\r\n    background-color: #e0e0e0;\r\n    color: #333;\r\n    border: 1px solid #333;\r\n  }\r\n\r\n  &.info {\r\n    background-color: #d0e7ff;\r\n    color: #0056b3;\r\n    border: 1px solid #0056b3;\r\n  }\r\n\r\n  &.success {\r\n    background-color: #d4edda;\r\n    color: #155724;\r\n    border: 1px solid #155724;\r\n  }\r\n\r\n  &.warning {\r\n    background-color: #fff3cd;\r\n    color: #856404;\r\n    border: 1px solid #856404;\r\n  }\r\n\r\n  &.danger {\r\n    background-color: #f8d7da;\r\n    color: #721c24;\r\n    border: 1px solid #721c24;\r\n  }\r\n}\r\n",
                    "styleUrl": "./badge.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<span\n  class=\"badge\"\n  [ngClass]=\"variant\"\n  [style.fontSize]=\"fontSize\"\n  [style.fontWeight]=\"fontWeight\"\n  [style.height]=\"height\"\n  [style.width]=\"width\"\n>\n  {{ label }}\n</span>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-55a06e562146bca26e2ab3ba75cbf4ec685a45c2bc0ebee2ad98ea8102dd508c0ecf02495e162fe9fcdbbc794946f6af1a4a0f1c62df6c3685d96bcf7441769a",
            "file": "src/app/components/atoms/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "borderless",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "borderRadius",
                    "defaultValue": "'0px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "fontSize",
                    "defaultValue": "'1rem'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "'auto'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconPosition",
                    "defaultValue": "'start'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "\"start\" | \"end\"",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "\"primary\" | \"secondary\" | \"danger\"",
                    "decorators": []
                },
                {
                    "name": "width",
                    "defaultValue": "'auto'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "IconComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { IconComponent } from '../icon/icon.component';\r\n\r\n@Component({\r\n  selector: 'app-button',\r\n  standalone: true,\r\n  imports: [CommonModule, IconComponent],\r\n  templateUrl: './button.component.html',\r\n  styleUrls: ['./button.component.scss'],\r\n})\r\nexport class ButtonComponent {\r\n  // --------------------------- Properties --------------------------\r\n  // Input properties\r\n  @Input() label: string = 'Button';\r\n  @Input() type: 'button' | 'submit' | 'reset' = 'button'; // Default is button\r\n  @Input() disabled: boolean = false;\r\n  @Input() variant: 'primary' | 'secondary' | 'danger' = 'primary';\r\n  @Input() icon?: string; // Material icon name\r\n  @Input() iconPosition: 'start' | 'end' = 'start'; // default is front of the label\r\n  @Input() borderRadius: string = '0px'; // Default square\r\n  @Input() borderless: boolean = false; // Default is not borderless (with border)\r\n  @Input() width: string = 'auto'; // Default is auto width\r\n  @Input() height: string = 'auto'; // Default is auto height\r\n  @Input() fontSize: string = '1rem'; // Default font size\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 0.5rem;\r\n  font-weight: 600;\r\n  padding: 0.4rem 0.9rem;\r\n  cursor: pointer;\r\n  background-color: white;\r\n  border: 2px solid;\r\n  border-radius: 0px;\r\n  transition: background-color 0.2s, color 0.2s, border-color 0.2s;\r\n\r\n  &.primary {\r\n    border-color: #af15fd;\r\n    color: #af15fd;\r\n\r\n    &:hover {\r\n      background-color: rgba(175, 21, 253, 0.1);\r\n    }\r\n  }\r\n\r\n  &.secondary {\r\n    border-color: #6c757d;\r\n    color: #6c757d;\r\n\r\n    &:hover {\r\n      background-color: rgba(108, 117, 125, 0.1);\r\n    }\r\n  }\r\n\r\n  &.danger {\r\n    border-color: #dc3545;\r\n    color: #dc3545;\r\n\r\n    &:hover {\r\n      background-color: rgba(220, 53, 69, 0.1);\r\n    }\r\n  }\r\n\r\n  &:disabled {\r\n    opacity: 0.6;\r\n    cursor: not-allowed;\r\n    background-color: #f9f9f9;\r\n    color: #ccc;\r\n    border-color: #ccc;\r\n  }\r\n\r\n  app-icon {\r\n    color: inherit;\r\n  }\r\n}\r\n\r\nbutton.borderless {\r\n  border: none !important;\r\n  background-color: transparent !important;\r\n  padding: 0;\r\n  box-shadow: none;\r\n\r\n  &:hover {\r\n    background-color: rgba(0, 0, 0, 0.05);\r\n  }\r\n\r\n  &:disabled {\r\n    opacity: 0.5;\r\n    background-color: transparent;\r\n    cursor: not-allowed;\r\n  }\r\n}\r\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<button\r\n  [type]=\"type\"\r\n  [disabled]=\"disabled\"\r\n  [ngClass]=\"[variant, borderless ? 'borderless' : '']\"\r\n  [style.borderRadius]=\"borderRadius\"\r\n  [style.width]=\"width\"\r\n  [style.height]=\"height\"\r\n  [style.fontSize]=\"fontSize\"\r\n>\r\n  <ng-container *ngIf=\"icon && iconPosition === 'start'\">\r\n    <app-icon [name]=\"icon\" size=\"20px\" />\r\n  </ng-container>\r\n\r\n  <span>{{ label }}</span>\r\n\r\n  <ng-container *ngIf=\"icon && iconPosition === 'end'\">\r\n    <app-icon [name]=\"icon\" size=\"20px\" />\r\n  </ng-container>\r\n</button>\r\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-31809cb4936d3291a0b386d50be5e6407bc4b1988e2e83915ec64e56d4671b834128978dc105d725084f02f6bc1da2e0bdc9f53c59a789124eefccdd75fe987d",
            "file": "src/app/components/atoms/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "colour",
                    "defaultValue": "'#af15fd'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "checkedChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "checkboxId",
                    "defaultValue": "`customCheckbox-${++nextId}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "toggleCheck",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nlet nextId = 0;\n\n@Component({\n  selector: 'app-checkbox',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.scss'],\n})\nexport class CheckboxComponent {\n\n  // --------------------------- Properties --------------------------\n  // Input properties\n  @Input() checked: boolean = false;\n  @Input() disabled: boolean = false;\n  @Input() colour: string = '#af15fd';\n\n  // Output properties\n  @Output() checkedChange = new EventEmitter<boolean>();\n\n\n  // Unique ID for the checkbox\n  checkboxId = `customCheckbox-${++nextId}`;\n\n  // --------------------------- Handlers ---------------------------\n\n  toggleCheck(event: Event): void {\n    const input = event.target as HTMLInputElement;\n    this.checkedChange.emit(input.checked);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".checkbox-wrapper {\r\n  position: relative;\r\n  display: inline-block;\r\n  width: 20px;\r\n  height: 20px;\r\n  cursor: pointer;\r\n\r\n  input {\r\n    position: absolute;\r\n    opacity: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    margin: 0;\r\n    z-index: 2;\r\n    cursor: pointer;\r\n    pointer-events: all;\r\n  }\r\n\r\n  .custom-checkbox {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 1;\r\n    width: 100%;\r\n    height: 100%;\r\n    border: 2px solid;\r\n    border-radius: 4px;\r\n    background-color: white;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n\r\n  .checkmark {\r\n    position: absolute;\r\n    top: 2px;\r\n    width: 5px;\r\n    height: 12px;\r\n    border: solid;\r\n    border-width: 0 2px 2px 0;\r\n    transform: rotate(45deg);\r\n    display: inline-block;\r\n\r\n  }\r\n}\r\n",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<label class=\"checkbox-wrapper\" [for]=\"checkboxId\">\n  <input\n    [id]=\"checkboxId\"\n    type=\"checkbox\"\n    [checked]=\"checked\"\n    [disabled]=\"disabled\"\n    (change)=\"toggleCheck($event)\"\n    title=\"Toggle checkbox\"\n  />\n  <span class=\"custom-checkbox\" [style.borderColor]=\"colour\">\n    <span\n      class=\"checkmark\"\n      *ngIf=\"checked\"\n      [style.borderColor]=\"colour\"\n    ></span>\n  </span>\n</label>\n"
        },
        {
            "name": "FilterActionGroupComponent",
            "id": "component-FilterActionGroupComponent-59fc373828b191fc4c64853e9c6255eb49c61dca9f65a884ad91582a1fde4c1fed0b2deeee753a89232ad1f31aa9793a51ef6eefb26b52afd65c7b569ffaf7fb",
            "file": "src/app/components/organisms/filterActionGroup/filterActionGroup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-filter-action-group",
            "styleUrls": [
                "./filterActionGroup.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./filterActionGroup.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "selectedTab",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tabs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "FilterTab[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "exportClicked",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                },
                {
                    "name": "filterClicked",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter"
                },
                {
                    "name": "tabChanged",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleExport",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleTabChange",
                    "args": [
                        {
                            "name": "tab",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TabGroupComponent",
                    "type": "component"
                },
                {
                    "name": "ActionBarComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TabGroupComponent } from '../../molecules/filterTabGroup/filterTabGroup.component';\r\nimport { ActionBarComponent } from '../../molecules/actionBar/actionBar.component';\r\n\r\nexport interface FilterTab {\r\n  label: string;\r\n  count: number;\r\n  state: string;\r\n  active?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-filter-action-group',\r\n  standalone: true,\r\n  imports: [CommonModule, TabGroupComponent, ActionBarComponent],\r\n  templateUrl: './filterActionGroup.component.html',\r\n  styleUrls: ['./filterActionGroup.component.scss'],\r\n})\r\n\r\nexport class FilterActionGroupComponent {\r\n\r\n  // --------------------------- Properties --------------------------\r\n  // Input properties\r\n  @Input() tabs: FilterTab[] = [];\r\n  @Input() selectedTab: string = '';\r\n\r\n  // Output properties\r\n  @Output() tabChanged = new EventEmitter<string>();\r\n  @Output() exportClicked = new EventEmitter<void>();\r\n  @Output() filterClicked = new EventEmitter<void>();\r\n\r\n  // --------------------------- Handlers --------------------------\r\n\r\n  handleTabChange(tab: string) {\r\n    this.tabChanged.emit(tab);\r\n  }\r\n\r\n  handleExport() {\r\n    this.exportClicked.emit();\r\n  }\r\n\r\n  handleFilter() {\r\n    this.filterClicked.emit();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".filter-action-group {\r\n  display: flex;\r\n  justify-content:  space-between;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  gap: 1rem;\r\n\r\n}\r\n",
                    "styleUrl": "./filterActionGroup.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"filter-action-group\">\n  <app-tab-group\n    [tabs]=\"tabs\"\n    [selectedTab]=\"selectedTab\"\n    (tabSelected)=\"handleTabChange($event)\"\n\n  />\n\n  <app-action-bar\n    (exportClicked)=\"handleExport()\"\n    (filterClicked)=\"handleFilter()\"\n  />\n</div>\n"
        },
        {
            "name": "FilterTabButtonComponent",
            "id": "component-FilterTabButtonComponent-8a8606e085f174efc737011227efad27aedc83adbe799b89a3b8802aba0fac606c0ff1fcf37e57b54643c12c5d06a8871e9896d76ec989a83215277f10a3c4c4",
            "file": "src/app/components/atoms/filterTabButton/filterTabButton.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-filter-tab-button",
            "styleUrls": [
                "./filterTabButton.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./filterTabButton.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "active",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "count",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selected",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ButtonComponent } from '../button/button.component';\r\n\r\n@Component({\r\n  selector: 'app-filter-tab-button',\r\n  standalone: true,\r\n  imports: [CommonModule, ButtonComponent],\r\n  templateUrl: './filterTabButton.component.html',\r\n  styleUrls: ['./filterTabButton.component.scss'],\r\n})\r\nexport class FilterTabButtonComponent {\r\n\r\n  // --------------------------- Properties --------------------------\r\n  // Input properties\r\n  @Input() label: string = '';\r\n  @Input() count: number = 0;\r\n  @Input() active: boolean = false;\r\n\r\n  // Output properties\r\n  @Output() selected = new EventEmitter<void>();\r\n\r\n  // --------------------------- Handlers --------------------------\r\n\r\n  handleClick(): void {\r\n    this.selected.emit();\r\n  }\r\n\r\n  get displayText(): string {\r\n    return `${this.label} (${this.count})`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: inline-block;\r\n\r\n  app-button {\r\n    padding: 0.35rem 0.3rem;\r\n    font-weight: 500;\r\n    font-size: 0.85rem;\r\n    border-width: 2px;\r\n\r\n    &.primary {\r\n      border-color: #af15fd;\r\n      color: #af15fd;\r\n\r\n      &:hover {\r\n        background-color: rgba(175, 21, 253, 0.1);\r\n      }\r\n    }\r\n\r\n    &.secondary {\r\n      border-color: #ddd;\r\n      color: #555;\r\n\r\n      &:hover {\r\n        background-color: rgba(0, 0, 0, 0.04);\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./filterTabButton.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "displayText": {
                    "name": "displayText",
                    "getSignature": {
                        "name": "displayText",
                        "type": "string",
                        "returnType": "string",
                        "line": 29
                    }
                }
            },
            "templateData": "<app-button\n  [label]=\"displayText\"\n  [variant]=\"active ? 'primary' : 'secondary'\"\n  [borderRadius]=\"'9999px'\"\n  (click)=\"handleClick()\"\n  width=\"auto\"\n  height=\"35px\"\n  fontSize=\"14px\"\n/>\n"
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-996eb234ef8c38ae235f982e252f6566cbecf703bb6a9a25ba2189460e2537c8b3f554875cb5b0e174e1a57207e90380880f20e99534f32f49b1152d877cb898",
            "file": "src/app/components/atoms/icon/icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-icon",
            "styleUrls": [
                "./icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "colour",
                    "defaultValue": "'inherit'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'20px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-icon',\r\n  standalone: true,\r\n  imports: [CommonModule, MatIconModule],\r\n  templateUrl: './icon.component.html',\r\n  styleUrls: ['./icon.component.scss'],\r\n})\r\nexport class IconComponent {\r\n\r\n  // --------------------------- Properties --------------------------\r\n  // Input properties\r\n  @Input() name: string = '';\r\n  @Input() size: string = '20px';\r\n  @Input() colour: string = 'inherit';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-icon {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  vertical-align: middle;\r\n  font-size: inherit;\r\n  height: 1em;\r\n  width: 1em;\r\n  line-height: 1;\r\n}\r\n",
                    "styleUrl": "./icon.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-icon [style.fontSize]=\"size\" [style.color]=\"colour\">\r\n  {{ name }}\r\n</mat-icon>\r\n"
        },
        {
            "name": "JobDoneComponent",
            "id": "component-JobDoneComponent-58068299cfb15d6f7bc821021ed78a7a91d823c7a81837e5cf57b81804cf60005a7935983f345995dc23d87d67f08bfeab09796d9ec8265ea3b4a432b1624d26",
            "file": "src/app/components/pages/jobDone/jobDone.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-page",
            "styleUrls": [
                "./jobDone.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./jobDone.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allChecked",
                    "defaultValue": "computed(\n    () =>\n      this.tableData().length > 0 &&\n      this.tableData().every((row) => row.selected)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "filterTabs",
                    "defaultValue": "computed(() => {\n    const data = this.tableData();\n    const counts: Record<string, number> = {};\n\n    for (const row of data) {\n      const key = row.state.toLowerCase();\n      counts[key] = (counts[key] || 0) + 1;\n    }\n\n    return [\n      { label: 'Total',\n        count: data.length,\n        state: 'total'\n      },\n      { label: 'Done',\n        count: counts['done'] ?? 0,\n        state: 'done'\n      },\n      {\n        label: 'Pending',\n        count: counts['pending'] ?? 0,\n        state: 'pending',\n      },\n    ];\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 124,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "selectedFilter",
                    "defaultValue": "signal<string>('total')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "selectedTab",
                    "defaultValue": "'total'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "sortDirection",
                    "defaultValue": "signal<SortDirection>('asc')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "sortKey",
                    "defaultValue": "signal<SortableKey>('fileNumber')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "statCards",
                    "defaultValue": "computed(() => {\n    const data = this.tableData();\n    const done = data.filter((r) => r.state.toLowerCase() === 'done').length;\n    const pending = data.filter(\n      (r) => r.state.toLowerCase() === 'pending'\n    ).length;\n\n    return [\n      { count: done,\n        label: 'Done',\n        icon: 'check'\n      },\n      { count: pending,\n        label: 'Pending',\n        icon: 'hourglass_empty'\n      },\n    ];\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 152,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "tableData",
                    "defaultValue": "signal<TableRowData[]>([\n    { id: 1, state: 'Done', fileNumber: 1, selected: false },\n    { id: 2, state: 'Pending', fileNumber: 3, selected: false },\n    { id: 3, state: 'Pending', fileNumber: 8, selected: false },\n    { id: 4, state: 'Done', fileNumber: 10, selected: false },\n    { id: 5, state: 'Pending', fileNumber: 5, selected: false },\n    { id: 6, state: 'Pending', fileNumber: 2, selected: false },\n    { id: 7, state: 'Pending', fileNumber: 4, selected: false },\n    { id: 8, state: 'Done', fileNumber: 6, selected: false },\n    { id: 9, state: 'Done', fileNumber: 7, selected: false },\n    { id: 10, state: 'Pending', fileNumber: 9, selected: false },\n    { id: 11, state: 'Done', fileNumber: 11, selected: false },\n    { id: 12, state: 'Pending', fileNumber: 12, selected: false },\n    { id: 13, state: 'Done', fileNumber: 13, selected: false },\n    { id: 14, state: 'Pending', fileNumber: 14, selected: false },\n    { id: 15, state: 'Done', fileNumber: 15, selected: false },\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "visibleTableData",
                    "defaultValue": "computed(() => {\n    const selected = this.selectedFilter();\n    const direction = this.sortDirection();\n    const key = this.sortKey();\n\n    // TableDataService for filtering and sorting\n    let rows = this.tableData();\n    if (selected !== 'total') {\n      rows = this.tableDataService.filterByState(rows, selected);\n    }\n    if (key === 'fileNumber') {\n      rows = this.tableDataService.sortByFileNumber(rows, direction);\n    } else {\n      // fallback to default sort for other keys\n      rows = [...rows].sort((a, b) => {\n        const aVal = a[key] ?? '';\n        const bVal = b[key] ?? '';\n        return direction === 'asc'\n          ? String(aVal).localeCompare(String(bVal))\n          : String(bVal).localeCompare(String(aVal));\n      });\n    }\n    return rows;\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onExportToCSV",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFilterChange",
                    "args": [
                        {
                            "name": "state",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRowSelected",
                    "args": [
                        {
                            "name": "change",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "change",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSortChange",
                    "args": [
                        {
                            "name": "change",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "change",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onToggleAll",
                    "args": [
                        {
                            "name": "checked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "checked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MainGroupTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, computed, signal } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MainGroupTemplateComponent } from '../../templates/mainGroup/mainGroup.component';\nimport { TableRowData } from '../../organisms/tableRowGroup/tableRowGroup.component';\nimport {\n  TableDataService,\n  SortDirection,\n} from '../../../services/tableData.service';\n\ntype SortableKey = keyof Pick<TableRowData, 'fileNumber' | 'state' | 'id'>;\n\n@Component({\n  selector: 'app-main-page',\n  standalone: true,\n  imports: [CommonModule, MainGroupTemplateComponent],\n  templateUrl: './jobDone.component.html',\n  styleUrls: ['./jobDone.component.scss'],\n})\n\n// ------------------------- JobDoneComponent -------------------------\n// This serves to show the use of Atomic Design principles in a Single Page Application (SPA).\n// By using a template component, it allows for the reuse of the main layout structure while focusing on the specific data and functionality of the \"Job Done\" page.\nexport class JobDoneComponent {\n  constructor(private tableDataService: TableDataService) {} // Service injection\n\n  // Base data\n  readonly tableData = signal<TableRowData[]>([\n    { id: 1, state: 'Done', fileNumber: 1, selected: false },\n    { id: 2, state: 'Pending', fileNumber: 3, selected: false },\n    { id: 3, state: 'Pending', fileNumber: 8, selected: false },\n    { id: 4, state: 'Done', fileNumber: 10, selected: false },\n    { id: 5, state: 'Pending', fileNumber: 5, selected: false },\n    { id: 6, state: 'Pending', fileNumber: 2, selected: false },\n    { id: 7, state: 'Pending', fileNumber: 4, selected: false },\n    { id: 8, state: 'Done', fileNumber: 6, selected: false },\n    { id: 9, state: 'Done', fileNumber: 7, selected: false },\n    { id: 10, state: 'Pending', fileNumber: 9, selected: false },\n    { id: 11, state: 'Done', fileNumber: 11, selected: false },\n    { id: 12, state: 'Pending', fileNumber: 12, selected: false },\n    { id: 13, state: 'Done', fileNumber: 13, selected: false },\n    { id: 14, state: 'Pending', fileNumber: 14, selected: false },\n    { id: 15, state: 'Done', fileNumber: 15, selected: false },\n  ]);\n\n  // Sorting\n  readonly sortKey = signal<SortableKey>('fileNumber');\n  readonly sortDirection = signal<SortDirection>('asc');\n  selectedTab: string = 'total';\n\n  // Filtering\n  readonly selectedFilter = signal<string>('total');\n\n  readonly visibleTableData = computed(() => {\n    const selected = this.selectedFilter();\n    const direction = this.sortDirection();\n    const key = this.sortKey();\n\n    // TableDataService for filtering and sorting\n    let rows = this.tableData();\n    if (selected !== 'total') {\n      rows = this.tableDataService.filterByState(rows, selected);\n    }\n    if (key === 'fileNumber') {\n      rows = this.tableDataService.sortByFileNumber(rows, direction);\n    } else {\n      // fallback to default sort for other keys\n      rows = [...rows].sort((a, b) => {\n        const aVal = a[key] ?? '';\n        const bVal = b[key] ?? '';\n        return direction === 'asc'\n          ? String(aVal).localeCompare(String(bVal))\n          : String(bVal).localeCompare(String(aVal));\n      });\n    }\n    return rows;\n  });\n\n  // ---------------------------- Row selection ---------------------\n\n  readonly allChecked = computed(\n    () =>\n      this.tableData().length > 0 &&\n      this.tableData().every((row) => row.selected)\n  );\n\n  onRowSelected(change: { id: string | number; selected: boolean }) {\n    this.tableData.update((rows) =>\n      rows.map((row) =>\n        row.id === change.id ? { ...row, selected: change.selected } : row\n      )\n    );\n  }\n\n  onToggleAll(checked: boolean) {\n    this.tableData.update((rows) =>\n      rows.map((row) => ({ ...row, selected: checked }))\n    );\n  }\n\n  // ---------------------------- Handlers ----------------------------\n\n  onSortChange(change: { key: string; direction: SortDirection }) {\n    if (['fileNumber', 'id', 'state'].includes(change.key)) {\n      this.sortKey.set(change.key as 'fileNumber' | 'state' | 'id');\n      this.sortDirection.set(change.direction);\n    }\n  }\n\n  onFilterChange(state: string) {\n    this.selectedFilter.set(state);\n    this.selectedTab = state;\n  }\n\n  // ------------------------------ CSV Export ------------------------------\n\n  onExportToCSV(): void {\n    const rows = this.visibleTableData();\n    const csvContent = this.tableDataService.exportToCSV(rows); // <-- Use service\n    this.tableDataService.downloadCSV(csvContent, 'table-data.csv'); // <-- Use service\n  }\n\n  // ------------------------------ Filter tabs ------------------------------\n\n  readonly filterTabs = computed(() => {\n    const data = this.tableData();\n    const counts: Record<string, number> = {};\n\n    for (const row of data) {\n      const key = row.state.toLowerCase();\n      counts[key] = (counts[key] || 0) + 1;\n    }\n\n    return [\n      { label: 'Total',\n        count: data.length,\n        state: 'total'\n      },\n      { label: 'Done',\n        count: counts['done'] ?? 0,\n        state: 'done'\n      },\n      {\n        label: 'Pending',\n        count: counts['pending'] ?? 0,\n        state: 'pending',\n      },\n    ];\n  });\n\n  // ----------------------------- Stat cards -----------------------------\n\n  readonly statCards = computed(() => {\n    const data = this.tableData();\n    const done = data.filter((r) => r.state.toLowerCase() === 'done').length;\n    const pending = data.filter(\n      (r) => r.state.toLowerCase() === 'pending'\n    ).length;\n\n    return [\n      { count: done,\n        label: 'Done',\n        icon: 'check'\n      },\n      { count: pending,\n        label: 'Pending',\n        icon: 'hourglass_empty'\n      },\n    ];\n  });\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".page-wrapper {\r\n  background-color: #f5f5f5;\r\n  min-height: 100vh;\r\n  padding: 2rem;\r\n  box-sizing: border-box;\r\n}\r\n",
                    "styleUrl": "./jobDone.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "tableDataService",
                        "type": "TableDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "tableDataService",
                        "type": "TableDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"page-wrapper\">\n  <app-main-group-template\n    [statCards]=\"statCards()\"\n    [filterTabs]=\"filterTabs()\"\n    [tableData]=\"visibleTableData()\"\n    [sortKey]=\"sortKey()\"\n    [sortDirection]=\"sortDirection()\"\n    (sortChange)=\"onSortChange($event)\"\n    [allChecked]=\"allChecked()\"\n    (toggleAll)=\"onToggleAll($event)\"\n    (rowSelected)=\"onRowSelected($event)\"\n    (filterTabChange)=\"onFilterChange($event)\"\n    [selectedTab]=\"selectedFilter()\"\n    (exportClicked)=\"onExportToCSV()\"\n  />\n</div>\n"
        },
        {
            "name": "MainGroupTemplateComponent",
            "id": "component-MainGroupTemplateComponent-2ca6561494ce10b0e9a5b5c7126f500b12625d77285ea9fa3885f994aa15ab8de3b7e07a3cbff3a5dd82d789bcdfea225c7bc97cce03c48531064e2b7eda5f8e",
            "file": "src/app/components/templates/mainGroup/mainGroup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-group-template",
            "styleUrls": [
                "./mainGroup.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./mainGroup.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "allChecked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "filterTabs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "navTabs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "selectedTab",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "sortDirection",
                    "defaultValue": "'asc'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "\"asc\" | \"desc\"",
                    "decorators": []
                },
                {
                    "name": "sortKey",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "statCards",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "tableData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "TableRowData[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "exportClicked",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "EventEmitter"
                },
                {
                    "name": "filterTabChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowSelected",
                    "defaultValue": "new EventEmitter<{ id: string | number; selected: boolean }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "EventEmitter"
                },
                {
                    "name": "sortChange",
                    "defaultValue": "new EventEmitter<{ key: string; direction: 'asc' | 'desc' }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "EventEmitter"
                },
                {
                    "name": "toggleAll",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "StatCardGroupComponent",
                    "type": "component"
                },
                {
                    "name": "FilterActionGroupComponent",
                    "type": "component"
                },
                {
                    "name": "TableHeaderComponent",
                    "type": "component"
                },
                {
                    "name": "TableRowGroupComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { StatCardGroupComponent } from '../../organisms/statCardGroup/statCardGroup.component';\r\nimport { FilterActionGroupComponent } from '../../organisms/filterActionGroup/filterActionGroup.component';\r\nimport { TableHeaderComponent } from '../../molecules/tableHeader/tableHeader.component';\r\nimport { TableRowGroupComponent } from '../../organisms/tableRowGroup/tableRowGroup.component';\r\nimport { TableRowData } from '../../organisms/tableRowGroup/tableRowGroup.component';\r\n\r\n@Component({\r\n  selector: 'app-main-group-template',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    StatCardGroupComponent,\r\n    FilterActionGroupComponent,\r\n    TableHeaderComponent,\r\n    TableRowGroupComponent\r\n  ],\r\n  templateUrl: './mainGroup.component.html',\r\n  styleUrls: ['./mainGroup.component.scss']\r\n})\r\nexport class MainGroupTemplateComponent {\r\n\r\n  // --------------------------- Properties --------------------------\r\n  // Input properties\r\n  @Input() navTabs: any[] = [];\r\n  @Input() statCards: any[] = [];\r\n  @Input() filterTabs: any[] = [];\r\n  @Input() tableData: TableRowData[] = [];\r\n  @Input() sortKey: string = '';\r\n  @Input() sortDirection: 'asc' | 'desc' = 'asc';\r\n  @Input() selectedTab: string = '';\r\n  @Input() allChecked: boolean = false;\r\n\r\n  // Output properties\r\n  @Output() toggleAll = new EventEmitter<boolean>();\r\n  @Output() sortChange = new EventEmitter<{ key: string; direction: 'asc' | 'desc' }>();\r\n  @Output() rowSelected = new EventEmitter<{ id: string | number; selected: boolean }>();\r\n  @Output() filterTabChange = new EventEmitter<string>();\r\n  @Output() exportClicked = new EventEmitter<void>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".main-template {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n  padding: 0rem;\r\n  background: #f5f5f5;\r\n  margin-right: auto;\r\n}\r\n\r\n.table-section {\r\n  border: 1px solid #ccc;\r\n  border-radius: 6px;\r\n  overflow-x: auto;\r\n  background: white;\r\n}\r\n\r\n.table-row-scroll-wrapper {\r\n  max-height: calc(100vh - 25rem);\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n}\r\n\r\n\r\napp-stat-card-group {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 100%;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n  padding-bottom: 1rem;\r\n  padding-top: 0rem;\r\n}\r\n\r\napp-filter-action-bar {\r\n  padding-bottom: 2rem;\r\n}\r\n",
                    "styleUrl": "./mainGroup.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"main-template\">\r\n\r\n\r\n  <app-stat-card-group [cards]=\"statCards\" />\r\n\r\n  <app-filter-action-group\r\n    [tabs]=\"filterTabs\"\r\n    [selectedTab]=\"selectedTab\"\r\n    (tabChanged)=\"filterTabChange.emit($event)\"\r\n    (exportClicked)=\"exportClicked.emit()\"\r\n    />\r\n\r\n  <div class=\"table-section\">\r\n  <app-table-header\r\n    [sortKey]=\"sortKey\"\r\n    [sortDirection]=\"sortDirection\"\r\n    [allChecked]=\"allChecked\"\r\n    (sortChange)=\"sortChange.emit($event)\"\r\n    (toggleAll)=\"toggleAll.emit($event)\"\r\n  />\r\n\r\n  <div class=\"table-row-scroll-wrapper\">\r\n    <app-table-row-group\r\n      [rows]=\"tableData\"\r\n      (rowSelected)=\"rowSelected.emit($event)\"\r\n\r\n    />\r\n  </div>\r\n</div>\r\n\r\n</div>\r\n"
        },
        {
            "name": "MainPageComponent",
            "id": "component-MainPageComponent-0f22e3f185c13ea4ae335a8a74bf614ec3832795628e1d3c29f7219020e22fb7de363868e6603478f137c9a29d38764bb1220d3484d6e2961b032e62afde3cec",
            "file": "src/app/components/pages/mainPage/mainPage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-page",
            "styleUrls": [
                "./mainPage.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./mainPage.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allChecked",
                    "defaultValue": "computed(\r\n    () =>\r\n      this.tableData().length > 0 &&\r\n      this.tableData().every((row) => row.selected)\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "filterTabs",
                    "defaultValue": "computed(() => {\r\n    const data = this.tableData();\r\n    const counts: Record<string, number> = {};\r\n\r\n    for (const row of data) {\r\n      const key = row.state.toLowerCase();\r\n      counts[key] = (counts[key] || 0) + 1;\r\n    }\r\n\r\n    return [\r\n      { label: 'Total', count: data.length, state: 'total' },\r\n      { label: 'Identity', count: counts['identity'] ?? 0, state: 'identity' },\r\n      {\r\n        label: 'Pre-payment',\r\n        count: counts['pre-payment'] ?? 0,\r\n        state: 'pre-payment',\r\n      },\r\n      {\r\n        label: 'Post-payment',\r\n        count: counts['post-payment'] ?? 0,\r\n        state: 'post-payment',\r\n      },\r\n      {\r\n        label: 'Refund request',\r\n        count: counts['refund request'] ?? 0,\r\n        state: 'refund request',\r\n      },\r\n      { label: 'Fraud', count: counts['fraud'] ?? 0, state: 'fraud' },\r\n      {\r\n        label: 'Validated',\r\n        count: counts['validated'] ?? 0,\r\n        state: 'validated',\r\n      },\r\n    ];\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 135,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "selectedFilter",
                    "defaultValue": "signal<string>('total')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "selectedTab",
                    "defaultValue": "'total'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "sortDirection",
                    "defaultValue": "signal<SortDirection>('asc')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "sortKey",
                    "defaultValue": "signal<SortableKey>('fileNumber')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "statCards",
                    "defaultValue": "computed(() => {\r\n    const data = this.tableData();\r\n    const counts: Record<string, number> = {};\r\n\r\n    for (const row of data) {\r\n      const key = row.state.toLowerCase();\r\n      counts[key] = (counts[key] || 0) + 1;\r\n    }\r\n\r\n    return [\r\n      { count: data.length,\r\n        label: 'Total',\r\n        icon: 'layers'\r\n      },\r\n      { count: counts['identity'] ?? 0,\r\n        label: 'Identity',\r\n        icon: 'person'\r\n      },\r\n      { count: counts['refund request'] ?? 0,\r\n        label: 'Refund Request',\r\n        icon: 'receipt',\r\n      },\r\n      {\r\n        count: counts['fraud'] ?? 0,\r\n        label: 'Fraud',\r\n        icon: 'warning',\r\n      },\r\n      {\r\n        count: counts['validated'] ?? 0,\r\n        label: 'Validated',\r\n        icon: 'check',\r\n      },\r\n    ];\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 173,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "tableData",
                    "defaultValue": "signal<TableRowData[]>([\r\n    { id: 1, state: 'Fraud', fileNumber: 1, selected: false },\r\n    { id: 2, state: 'Refund Request', fileNumber: 3, selected: false },\r\n    { id: 3, state: 'Pre-payment', fileNumber: 8, selected: false },\r\n    { id: 4, state: 'Validated', fileNumber: 10, selected: false },\r\n    { id: 5, state: 'Validated', fileNumber: 5, selected: false },\r\n    { id: 6, state: 'Post-payment', fileNumber: 2, selected: false },\r\n    { id: 7, state: 'Post-payment', fileNumber: 4, selected: false },\r\n    { id: 8, state: 'Identity', fileNumber: 6, selected: false },\r\n    { id: 9, state: 'Pre-payment', fileNumber: 7, selected: false },\r\n    { id: 10, state: 'Validated', fileNumber: 9, selected: false },\r\n    { id: 11, state: 'Validated', fileNumber: 11, selected: false },\r\n    { id: 12, state: 'Refund Request', fileNumber: 12, selected: false },\r\n    { id: 13, state: 'Fraud', fileNumber: 13, selected: false },\r\n    { id: 14, state: 'Fraud', fileNumber: 14, selected: false },\r\n    { id: 15, state: 'Validated', fileNumber: 15, selected: false },\r\n    { id: 16, state: 'Identity', fileNumber: 16, selected: false },\r\n    { id: 17, state: 'Post-payment', fileNumber: 17, selected: false },\r\n    { id: 18, state: 'Refund Request', fileNumber: 18, selected: false },\r\n    { id: 19, state: 'Fraud', fileNumber: 19, selected: false },\r\n    { id: 20, state: 'Validated', fileNumber: 20, selected: false },\r\n    { id: 21, state: 'Identity', fileNumber: 21, selected: false },\r\n    { id: 22, state: 'Post-payment', fileNumber: 22, selected: false },\r\n    { id: 23, state: 'Refund Request', fileNumber: 23, selected: false },\r\n    { id: 24, state: 'Fraud', fileNumber: 24, selected: false },\r\n    { id: 25, state: 'Validated', fileNumber: 25, selected: false },\r\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "visibleTableData",
                    "defaultValue": "computed(() => {\r\n    const selected = this.selectedFilter();\r\n    const direction = this.sortDirection();\r\n    const key = this.sortKey();\r\n\r\n    // TableDataService for filtering and sorting\r\n    let rows = this.tableData();\r\n    if (selected !== 'total') {\r\n      rows = this.tableDataService.filterByState(rows, selected);\r\n    }\r\n    if (key === 'fileNumber') {\r\n      rows = this.tableDataService.sortByFileNumber(rows, direction);\r\n    } else {\r\n      // fallback to default sort for other keys\r\n      rows = [...rows].sort((a, b) => {\r\n        const aVal = a[key] ?? '';\r\n        const bVal = b[key] ?? '';\r\n        return direction === 'asc'\r\n          ? String(aVal).localeCompare(String(bVal))\r\n          : String(bVal).localeCompare(String(aVal));\r\n      });\r\n    }\r\n    return rows;\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onExportToCSV",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFilterChange",
                    "args": [
                        {
                            "name": "state",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRowSelected",
                    "args": [
                        {
                            "name": "change",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "change",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSortChange",
                    "args": [
                        {
                            "name": "change",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "change",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onToggleAll",
                    "args": [
                        {
                            "name": "checked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "checked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MainGroupTemplateComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, computed, signal } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MainGroupTemplateComponent } from '../../templates/mainGroup/mainGroup.component';\r\nimport { TableRowData } from '../../organisms/tableRowGroup/tableRowGroup.component';\r\nimport {\r\n  TableDataService,\r\n  SortDirection,\r\n} from '../../../services/tableData.service';\r\n\r\ntype SortableKey = keyof Pick<TableRowData, 'fileNumber' | 'state' | 'id'>;\r\n\r\n@Component({\r\n  selector: 'app-main-page',\r\n  standalone: true,\r\n  imports: [CommonModule, MainGroupTemplateComponent],\r\n  templateUrl: './mainPage.component.html',\r\n  styleUrls: ['./mainPage.component.scss'],\r\n})\r\n\r\n// ------------------------- MainPageComponent -------------------------\r\n// This component serves as the main page of the application, handling data display, sorting, filtering, and exporting functionalities.\r\n// It uses a service to manage table data operations like sorting, filtering, and exporting to CSV.\r\n\r\nexport class MainPageComponent {\r\n  constructor(private tableDataService: TableDataService) {} // Service injection\r\n\r\n  // Base data\r\n  readonly tableData = signal<TableRowData[]>([\r\n    { id: 1, state: 'Fraud', fileNumber: 1, selected: false },\r\n    { id: 2, state: 'Refund Request', fileNumber: 3, selected: false },\r\n    { id: 3, state: 'Pre-payment', fileNumber: 8, selected: false },\r\n    { id: 4, state: 'Validated', fileNumber: 10, selected: false },\r\n    { id: 5, state: 'Validated', fileNumber: 5, selected: false },\r\n    { id: 6, state: 'Post-payment', fileNumber: 2, selected: false },\r\n    { id: 7, state: 'Post-payment', fileNumber: 4, selected: false },\r\n    { id: 8, state: 'Identity', fileNumber: 6, selected: false },\r\n    { id: 9, state: 'Pre-payment', fileNumber: 7, selected: false },\r\n    { id: 10, state: 'Validated', fileNumber: 9, selected: false },\r\n    { id: 11, state: 'Validated', fileNumber: 11, selected: false },\r\n    { id: 12, state: 'Refund Request', fileNumber: 12, selected: false },\r\n    { id: 13, state: 'Fraud', fileNumber: 13, selected: false },\r\n    { id: 14, state: 'Fraud', fileNumber: 14, selected: false },\r\n    { id: 15, state: 'Validated', fileNumber: 15, selected: false },\r\n    { id: 16, state: 'Identity', fileNumber: 16, selected: false },\r\n    { id: 17, state: 'Post-payment', fileNumber: 17, selected: false },\r\n    { id: 18, state: 'Refund Request', fileNumber: 18, selected: false },\r\n    { id: 19, state: 'Fraud', fileNumber: 19, selected: false },\r\n    { id: 20, state: 'Validated', fileNumber: 20, selected: false },\r\n    { id: 21, state: 'Identity', fileNumber: 21, selected: false },\r\n    { id: 22, state: 'Post-payment', fileNumber: 22, selected: false },\r\n    { id: 23, state: 'Refund Request', fileNumber: 23, selected: false },\r\n    { id: 24, state: 'Fraud', fileNumber: 24, selected: false },\r\n    { id: 25, state: 'Validated', fileNumber: 25, selected: false },\r\n  ]);\r\n\r\n  // Sorting\r\n  readonly sortKey = signal<SortableKey>('fileNumber');\r\n  readonly sortDirection = signal<SortDirection>('asc');\r\n  selectedTab: string = 'total';\r\n\r\n  // Filtering\r\n  readonly selectedFilter = signal<string>('total');\r\n\r\n  readonly visibleTableData = computed(() => {\r\n    const selected = this.selectedFilter();\r\n    const direction = this.sortDirection();\r\n    const key = this.sortKey();\r\n\r\n    // TableDataService for filtering and sorting\r\n    let rows = this.tableData();\r\n    if (selected !== 'total') {\r\n      rows = this.tableDataService.filterByState(rows, selected);\r\n    }\r\n    if (key === 'fileNumber') {\r\n      rows = this.tableDataService.sortByFileNumber(rows, direction);\r\n    } else {\r\n      // fallback to default sort for other keys\r\n      rows = [...rows].sort((a, b) => {\r\n        const aVal = a[key] ?? '';\r\n        const bVal = b[key] ?? '';\r\n        return direction === 'asc'\r\n          ? String(aVal).localeCompare(String(bVal))\r\n          : String(bVal).localeCompare(String(aVal));\r\n      });\r\n    }\r\n    return rows;\r\n  });\r\n\r\n  // ---------------------------- Row selection ---------------------\r\n\r\n  readonly allChecked = computed(\r\n    () =>\r\n      this.tableData().length > 0 &&\r\n      this.tableData().every((row) => row.selected)\r\n  );\r\n\r\n  onRowSelected(change: { id: string | number; selected: boolean }) {\r\n    this.tableData.update((rows) =>\r\n      rows.map((row) =>\r\n        row.id === change.id ? { ...row, selected: change.selected } : row\r\n      )\r\n    );\r\n  }\r\n\r\n  onToggleAll(checked: boolean) {\r\n    this.tableData.update((rows) =>\r\n      rows.map((row) => ({ ...row, selected: checked }))\r\n    );\r\n  }\r\n\r\n  // ---------------------------- Handlers ----------------------------\r\n\r\n  onSortChange(change: { key: string; direction: SortDirection }) {\r\n    if (['fileNumber', 'id', 'state'].includes(change.key)) {\r\n      this.sortKey.set(change.key as 'fileNumber' | 'state' | 'id');\r\n      this.sortDirection.set(change.direction);\r\n    }\r\n  }\r\n\r\n  onFilterChange(state: string) {\r\n    this.selectedFilter.set(state);\r\n    this.selectedTab = state;\r\n  }\r\n\r\n  // ------------------------------ CSV Export ------------------------------\r\n\r\n  onExportToCSV(): void {\r\n    const rows = this.visibleTableData();\r\n    const csvContent = this.tableDataService.exportToCSV(rows); // <-- Use service\r\n    this.tableDataService.downloadCSV(csvContent, 'table-data.csv'); // <-- Use service\r\n  }\r\n\r\n  // ------------------------------ Filter tabs ------------------------------\r\n\r\n  readonly filterTabs = computed(() => {\r\n    const data = this.tableData();\r\n    const counts: Record<string, number> = {};\r\n\r\n    for (const row of data) {\r\n      const key = row.state.toLowerCase();\r\n      counts[key] = (counts[key] || 0) + 1;\r\n    }\r\n\r\n    return [\r\n      { label: 'Total', count: data.length, state: 'total' },\r\n      { label: 'Identity', count: counts['identity'] ?? 0, state: 'identity' },\r\n      {\r\n        label: 'Pre-payment',\r\n        count: counts['pre-payment'] ?? 0,\r\n        state: 'pre-payment',\r\n      },\r\n      {\r\n        label: 'Post-payment',\r\n        count: counts['post-payment'] ?? 0,\r\n        state: 'post-payment',\r\n      },\r\n      {\r\n        label: 'Refund request',\r\n        count: counts['refund request'] ?? 0,\r\n        state: 'refund request',\r\n      },\r\n      { label: 'Fraud', count: counts['fraud'] ?? 0, state: 'fraud' },\r\n      {\r\n        label: 'Validated',\r\n        count: counts['validated'] ?? 0,\r\n        state: 'validated',\r\n      },\r\n    ];\r\n  });\r\n\r\n  // ----------------------------- Stat cards -----------------------------\r\n\r\n  readonly statCards = computed(() => {\r\n    const data = this.tableData();\r\n    const counts: Record<string, number> = {};\r\n\r\n    for (const row of data) {\r\n      const key = row.state.toLowerCase();\r\n      counts[key] = (counts[key] || 0) + 1;\r\n    }\r\n\r\n    return [\r\n      { count: data.length,\r\n        label: 'Total',\r\n        icon: 'layers'\r\n      },\r\n      { count: counts['identity'] ?? 0,\r\n        label: 'Identity',\r\n        icon: 'person'\r\n      },\r\n      { count: counts['refund request'] ?? 0,\r\n        label: 'Refund Request',\r\n        icon: 'receipt',\r\n      },\r\n      {\r\n        count: counts['fraud'] ?? 0,\r\n        label: 'Fraud',\r\n        icon: 'warning',\r\n      },\r\n      {\r\n        count: counts['validated'] ?? 0,\r\n        label: 'Validated',\r\n        icon: 'check',\r\n      },\r\n    ];\r\n  });\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".page-wrapper {\r\n  background-color: #f5f5f5;\r\n  min-height: 100vh;\r\n  padding: 2rem;\r\n  box-sizing: border-box;\r\n}\r\n",
                    "styleUrl": "./mainPage.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "tableDataService",
                        "type": "TableDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "tableDataService",
                        "type": "TableDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"page-wrapper\">\r\n  <app-main-group-template\r\n    [statCards]=\"statCards()\"\r\n    [filterTabs]=\"filterTabs()\"\r\n    [tableData]=\"visibleTableData()\"\r\n    [sortKey]=\"sortKey()\"\r\n    [sortDirection]=\"sortDirection()\"\r\n    (sortChange)=\"onSortChange($event)\"\r\n    [allChecked]=\"allChecked()\"\r\n    (toggleAll)=\"onToggleAll($event)\"\r\n    (rowSelected)=\"onRowSelected($event)\"\r\n    (filterTabChange)=\"onFilterChange($event)\"\r\n    [selectedTab]=\"selectedFilter()\"\r\n    (exportClicked)=\"onExportToCSV()\"\r\n  />\r\n</div>\r\n"
        },
        {
            "name": "NavTabComponent",
            "id": "component-NavTabComponent-407438e8234bbba755eae011630e0babef7560a14b389540a1034754a018a925ee8d198f3613d4a5465cbe3cb5ac6b94f41df1e5aaab6d745bf45a407dd4b037",
            "file": "src/app/components/molecules/navTab/navTab.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-nav-tab",
            "styleUrls": [
                "./navTab.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navTab.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "active",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "route",
                    "defaultValue": "'/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "IconComponent",
                    "type": "component"
                },
                {
                    "name": "TextComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { IconComponent } from '../../atoms/icon/icon.component';\nimport { TextComponent } from '../../atoms/text/text.component';\n\n@Component({\n  selector: 'app-nav-tab',\n  standalone: true,\n  imports: [CommonModule, RouterModule, IconComponent, TextComponent],\n  templateUrl: './navTab.component.html',\n  styleUrls: ['./navTab.component.scss'],\n})\nexport class NavTabComponent {\n\n  // --------------------------- Properties --------------------------\n  // Input properties\n  @Input() label: string = '';\n  @Input() icon: string = '';\n  @Input() route: string = '/';\n  @Input() active: boolean = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".nav-tab {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  gap: 0.4rem;\r\n  padding: 0.25rem 1rem 0.35rem; // reduced bottom padding\r\n  text-decoration: none;\r\n  color: #6c757d;\r\n  cursor: pointer;\r\n  border-bottom: 2px solid transparent;\r\n  transition: border-color 0.2s, color 0.2s;\r\n\r\n  &.active {\r\n    color: #af15fd;\r\n    border-bottom-color: #af15fd;\r\n  }\r\n\r\n  &:hover {\r\n    color: #bf41fe;\r\n    border-bottom-color: #ce70fd;\r\n  }\r\n\r\n  app-icon,\r\n  app-text {\r\n    display: inline-flex;\r\n    align-items: center;\r\n  }\r\n\r\n  app-text {\r\n    font-size: 0.95rem;\r\n  }\r\n}\r\n",
                    "styleUrl": "./navTab.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<a\n  [routerLink]=\"route\"\n  routerLinkActive=\"active\"\n  [routerLinkActiveOptions]=\"{ exact: true }\"\n  class=\"nav-tab\"\n  [class.active]=\"active\"\n>\n  <app-icon [name]=\"icon\" size=\"18px\" />\n  <app-text [content]=\"label\" weight=\"medium\" />\n</a>\n"
        },
        {
            "name": "NavTabGroupComponent",
            "id": "component-NavTabGroupComponent-0995d1f3925c054c28cb14a4fdfdfbd297d9d021cca0229cbfdc2f335a16291f7da762ea90d5e54540b629ea56fdcc9ac3e4966894bc7586c11d818e290c1b12",
            "file": "src/app/components/organisms/navTabGroup/navTabGroup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-nav-tab-group",
            "styleUrls": [
                "./navTabGroup.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navTabGroup.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "tabs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "NavTabItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NavTabComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NavTabComponent } from '../../molecules/navTab/navTab.component';\n\nexport interface NavTabItem {\n  label: string;\n  icon: string;\n  route: string;\n  active?: boolean;\n}\n\n@Component({\n  selector: 'app-nav-tab-group',\n  standalone: true,\n  imports: [CommonModule, NavTabComponent],\n  templateUrl: './navTabGroup.component.html',\n  styleUrls: ['./navTabGroup.component.scss'],\n})\nexport class NavTabGroupComponent {\n\n  // --------------------------- Properties --------------------------\n  // Input properties\n  @Input() tabs: NavTabItem[] = [];\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".nav-tab-group {\r\n  display: flex;\r\n  gap: 1rem;\r\n  border-bottom: 1px solid #e0e0e0;\r\n  padding-bottom: 0rem;\r\n  align-items: flex-end;\r\n}\r\n",
                    "styleUrl": "./navTabGroup.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<nav class=\"nav-tab-group\">\n  <app-nav-tab\n    *ngFor=\"let tab of tabs\"\n    [label]=\"tab.label\"\n    [icon]=\"tab.icon\"\n    [route]=\"tab.route\"\n    [active]=\"tab.active ?? false\"\n  />\n</nav>\n"
        },
        {
            "name": "StatCardComponent",
            "id": "component-StatCardComponent-96fb1f73f4a0f72b432a3f00063afd5146b8838c8a883403bc6b551f8cf87a650e76b7a5f5ec62b0977060a2972db0fbddfec1ed1fad97851b28ab5e4d5c7101",
            "file": "src/app/components/molecules/statCard/statCard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stat-card",
            "styleUrls": [
                "./statCard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./statCard.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "count",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number | string",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TextComponent",
                    "type": "component"
                },
                {
                    "name": "IconComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TextComponent } from '../../atoms/text/text.component';\nimport { IconComponent } from '../../atoms/icon/icon.component';\n\n@Component({\n  selector: 'app-stat-card',\n  standalone: true,\n  imports: [CommonModule, TextComponent, IconComponent],\n  templateUrl: './statCard.component.html',\n  styleUrls: ['./statCard.component.scss'],\n})\nexport class StatCardComponent {\n\n  // --------------------------- Properties --------------------------\n  // Input properties\n  @Input() label: string = '';\n  @Input() count: number | string = '';\n  @Input() icon: string = '';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  flex: 1 1 140px;           // responsive card sizing\r\n  max-width: 380px;\r\n  min-width: 140px;\r\n}\r\n\r\n.stat-card {\r\n  position: relative;\r\n  padding: 1rem;\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 8px;\r\n  background-color: white;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\r\n  height: 64px;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n\r\n  .card-icon {\r\n    position: absolute;\r\n    top: 0.5rem;\r\n    right: 0.5rem;\r\n  }\r\n\r\n  .card-content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 0.25rem;\r\n  }\r\n}\r\n",
                    "styleUrl": "./statCard.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"stat-card\">\n  <div class=\"card-icon\">\n    <app-icon [name]=\"icon\" size=\"20px\" colour=\"#af15fd\" />\n  </div>\n\n  <div class=\"card-content\">\n    <app-text [content]=\"count.toString()\" size=\"lg\" weight=\"bold\" />\n    <app-text [content]=\"label\" size=\"md\" />\n  </div>\n</div>\n"
        },
        {
            "name": "StatCardGroupComponent",
            "id": "component-StatCardGroupComponent-9f209766bfd1854dfecd69fc0c4c48590d3af666d3a17942aabfa7db675bde07275b165f5c9eb2df597559d2eac63fe918604f74d80a715d9665877eed6c474c",
            "file": "src/app/components/organisms/statCardGroup/statCardGroup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stat-card-group",
            "styleUrls": [
                "./statCardGroup.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./statCardGroup.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "cards",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "StatCardItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "StatCardComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StatCardComponent } from '../../molecules/statCard/statCard.component';\n\nexport interface StatCardItem {\n  count: number | string;\n  label: string;\n  icon: string;\n}\n\n@Component({\n  selector: 'app-stat-card-group',\n  standalone: true,\n  imports: [CommonModule, StatCardComponent],\n  templateUrl: './statCardGroup.component.html',\n  styleUrls: ['./statCardGroup.component.scss'],\n})\nexport class StatCardGroupComponent {\n\n  // --------------------------- Properties --------------------------\n  // Input properties\n  @Input() cards: StatCardItem[] = [];\n\n  // Output properties\n  // No output properties defined for this component\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".stat-card-group {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 1rem;\r\n  width: 100%;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./statCardGroup.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"stat-card-group\">\n  <app-stat-card\n    *ngFor=\"let card of cards\"\n    [count]=\"card.count\"\n    [label]=\"card.label\"\n    [icon]=\"card.icon\"\n  />\n</div>\n"
        },
        {
            "name": "TabGroupComponent",
            "id": "component-TabGroupComponent-a1376b3a49e75eab1f5e837997d95d56177495977b8600f3b89f7f9f04e2778fd07fd73f61224eb381370a8d96ab3c47651482da1a2169d90005e0830bc55742",
            "file": "src/app/components/molecules/filterTabGroup/filterTabGroup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tab-group",
            "styleUrls": [
                "./filterTabGroup.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./filterTabGroup.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "selectedTab",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tabs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "FilterTab[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "tabSelected",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onSelectTab",
                    "args": [
                        {
                            "name": "state",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FilterTabButtonComponent",
                    "type": "component"
                },
                {
                    "name": "FilterTabButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FilterTabButtonComponent } from '../../atoms/filterTabButton/filterTabButton.component';\n\nexport interface FilterTab {\n  label: string;\n  count: number;\n  state: string;\n}\n\n@Component({\n  selector: 'app-tab-group',\n  standalone: true,\n  imports: [CommonModule, FilterTabButtonComponent, FilterTabButtonComponent],\n  templateUrl: './filterTabGroup.component.html',\n  styleUrls: ['./filterTabGroup.component.scss'],\n})\nexport class TabGroupComponent {\n\n  // --------------------------- Properties --------------------------\n  // Input properties\n  @Input() tabs: FilterTab[] = [];\n  @Input() selectedTab: string = '';\n\n  // Output properties\n  @Output() tabSelected = new EventEmitter<string>();\n\n  // --------------------------- Handlers --------------------------\n\n  onSelectTab(state: string) {\n    this.tabSelected.emit(state);\n    this.selectedTab = state;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".filter-tab-group {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  column-gap: 2px;\r\n  row-gap: 0.4rem;\r\n}\r\n",
                    "styleUrl": "./filterTabGroup.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"filter-tab-group\">\n  <app-filter-tab-button\n    *ngFor=\"let tab of tabs\"\n    [label]=\"tab.label\"\n    [count]=\"tab.count\"\n    [active]=\"selectedTab === tab.state\"\n    (selected)=\"onSelectTab(tab.state)\"\n  />\n</div>\n"
        },
        {
            "name": "TableHeaderComponent",
            "id": "component-TableHeaderComponent-89bd18a8361a3c5cdbdbb9c5f8b24c3b0c2caf708f742c91d80dc5a79b6ecefea83f47baf2f9006903924dde26c08cfb1eb268f99f1df93c3b7e94c1f8e9eb04",
            "file": "src/app/components/molecules/tableHeader/tableHeader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table-header",
            "styleUrls": [
                "./tableHeader.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tableHeader.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "allChecked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "sortDirection",
                    "defaultValue": "'asc'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "\"asc\" | \"desc\"",
                    "decorators": []
                },
                {
                    "name": "sortKey",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "sortChange",
                    "defaultValue": "new EventEmitter<{ key: string; direction: 'asc' | 'desc' }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                },
                {
                    "name": "toggleAll",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleToggleAll",
                    "args": [
                        {
                            "name": "checked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "checked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleSort",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TextComponent",
                    "type": "component"
                },
                {
                    "name": "IconComponent",
                    "type": "component"
                },
                {
                    "name": "CheckboxComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TextComponent } from '../../atoms/text/text.component';\nimport { IconComponent } from '../../atoms/icon/icon.component';\nimport { CheckboxComponent } from '../../atoms/checkbox/checkbox.component';\n\n@Component({\n  selector: 'app-table-header',\n  standalone: true,\n  imports: [CommonModule, TextComponent, IconComponent, CheckboxComponent],\n  templateUrl: './tableHeader.component.html',\n  styleUrls: ['./tableHeader.component.scss'],\n})\nexport class TableHeaderComponent {\n\n  // --------------------------- Properties --------------------------\n  // Input properties\n  @Input() sortKey: string = '';\n  @Input() sortDirection: 'asc' | 'desc' = 'asc';\n  @Input() allChecked: boolean = false;\n\n  // Output properties\n  @Output() sortChange = new EventEmitter<{ key: string; direction: 'asc' | 'desc' }>();\n  @Output() toggleAll = new EventEmitter<boolean>();\n\n  // --------------------------- Handlers ---------------------------\n\n  toggleSort(key: string): void {\n    const newDirection = (key === this.sortKey && this.sortDirection === 'asc') ? 'desc' : 'asc';\n    this.sortChange.emit({ key, direction: newDirection });\n  }\n\n  handleToggleAll(checked: boolean) {\n    this.toggleAll.emit(checked);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".table-header-row {\r\n  display: table;\r\n  width: 100%;\r\n  table-layout: fixed;\r\n\r\n  th {\r\n    padding: 0.75rem 1rem;\r\n    text-align: left;\r\n    border-bottom: 2px solid #e0e0e0;\r\n    -webkit-user-select: none;\r\n    user-select: none;\r\n    vertical-align: middle;\r\n\r\n    &.checkbox-cell {\r\n      width: 60px;\r\n      text-align: center;\r\n      padding: 0;\r\n    }\r\n\r\n    &.state-cell {\r\n      width: 160px;\r\n      text-align: left;\r\n    }\r\n\r\n    &.file-number-cell {\r\n      width: auto;\r\n      text-align: left;\r\n    }\r\n\r\n    &.divider-col {\r\n      width: 1px;\r\n      padding: 0;\r\n      background-color: #e0e0e0;\r\n    }\r\n\r\n    &.action-cell {\r\n      width: 215px;\r\n      text-align: left;\r\n    }\r\n\r\n    &.sortable {\r\n      cursor: pointer;\r\n    }\r\n\r\n    .th-content {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 0.25rem;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./tableHeader.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<tr class=\"table-header-row\">\n  <th class=\"checkbox-cell\">\n    <app-checkbox\n    [checked]=\"allChecked\"\n    (checkedChange)=\"handleToggleAll($event)\"\n    />\n  </th>\n\n  <th class=\"state-cell\">\n    <app-text content=\"State\" weight=\"medium\" size=\"md\" />\n  </th>\n\n  <th class=\"sortable\" (click)=\"toggleSort('fileNumber')\">\n    <div class=\"th-content\">\n      <app-text content=\"File number\" weight=\"medium\" size=\"md\" />\n      <app-icon\n        *ngIf=\"sortKey === 'fileNumber'\"\n        [name]=\"sortDirection === 'asc' ? 'arrow_upward' : 'arrow_downward'\"\n        size=\"16px\"\n      />\n    </div>\n  </th>\n\n  <th class=\"divider-col\" aria-hidden=\"true\"></th>\n\n  <th class=\"action-cell\">\n    <app-text content=\"Action\" weight=\"medium\" size=\"md\" />\n  </th>\n</tr>\n\n"
        },
        {
            "name": "TableRowComponent",
            "id": "component-TableRowComponent-47f42bce3c28cf4a5a7e4265199b288f2de10700ad43530041ee4c8309aa1b0100111219b339d22a960eef0ad6ec0b941ed22d3740684c4142056226c81e745e",
            "file": "src/app/components/molecules/tableRow/tableRow.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table-row",
            "styleUrls": [
                "./tableRow.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tableRow.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "fileNumber",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "number | string",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "state",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "consult",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getBadgeVariant",
                    "args": [
                        {
                            "name": "state",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"info\" | \"success\" | \"warning\" | \"danger\"",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleConsult",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleSelect",
                    "args": [
                        {
                            "name": "checked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "checked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CheckboxComponent",
                    "type": "component"
                },
                {
                    "name": "TextComponent",
                    "type": "component"
                },
                {
                    "name": "BadgeComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CheckboxComponent } from '../../atoms/checkbox/checkbox.component';\nimport { TextComponent } from '../../atoms/text/text.component';\nimport { BadgeComponent } from '../../atoms/badge/badge.component';\nimport { ButtonComponent } from '../../atoms/button/button.component';\n\n@Component({\n  selector: 'app-table-row',\n  standalone: true,\n  imports: [\n    CommonModule,\n    CheckboxComponent,\n    TextComponent,\n    BadgeComponent,\n    ButtonComponent,\n  ],\n  templateUrl: './tableRow.component.html',\n  styleUrls: ['./tableRow.component.scss'],\n})\nexport class TableRowComponent {\n\n  // --------------------------- Properties --------------------------\n  // Input properties\n  @Input() selected: boolean = false;\n  @Input() state: string = '';\n  @Input() fileNumber: number | string = '';\n\n  // Output properties\n  @Output() selectChange = new EventEmitter<boolean>();\n  @Output() consult = new EventEmitter<void>();\n\n  // --------------------------- Handlers ---------------------------\n\n  toggleSelect(checked: boolean): void {\n    this.selectChange.emit(checked);\n  }\n\n  handleConsult(): void {\n    this.consult.emit();\n  }\n\n  // bage variant based on state\n  getBadgeVariant(state: string): 'info' | 'success' | 'warning' | 'danger' {\n    const map: Record<string, 'info' | 'success' | 'warning' | 'danger'> = {\n      fraud: 'danger',\n      validated: 'success',\n      'refund request': 'warning',\n      'post-payment': 'info',\n      identity: 'info',\n      done: 'success',\n      pending: 'warning',\n    };\n\n    return map[state.toLowerCase()] || 'info';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".table-row {\r\n  display: table;\r\n  width: 100%;\r\n\r\n  td {\r\n    padding: 0.75rem 1rem;\r\n    border-bottom: 1px solid #e0e0e0;\r\n    vertical-align: middle;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n    height: 50px;\r\n\r\n    &.checkbox-cell {\r\n      width: 60px;\r\n      text-align: center;\r\n      padding: 0;\r\n    }\r\n\r\n    &.state-cell {\r\n      width: 160px;\r\n      align-items: left;\r\n    }\r\n\r\n    &.file-number-cell {\r\n      text-align: left;\r\n      width: auto; // allow it to grow\r\n    }\r\n\r\n    &.divider-cell {\r\n      width: 1px;\r\n      background-color: #e0e0e0;\r\n      padding: 0;\r\n    }\r\n\r\n    &.action-cell {\r\n      width: 200px;\r\n      text-align: center;\r\n    }\r\n  }\r\n\r\n  &:hover {\r\n    background-color: #f9f9f9;\r\n  }\r\n}\r\n",
                    "styleUrl": "./tableRow.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<tr class=\"table-row\">\n  <td class=\"checkbox-cell\">\n    <app-checkbox\n      [checked]=\"selected\"\n      (checkedChange)=\"toggleSelect($event)\"\n      [colour]=\"'#af15fd'\"\n    />\n  </td>\n\n  <td class=\"state-cell\">\n    <app-badge\n    [label]=\"state\"\n    [variant]=\"getBadgeVariant(state)\"\n    fontSize=\"1.1rem\"\n    fontWeight=\"500\"\n    height=\"32px\"\n    width=\"150px\"\n  />\n  </td>\n\n  <td class=\"file-number-cell\">\n    <app-text [content]=\"fileNumber.toString()\" />\n  </td>\n\n  <td class=\"divider-cell\" aria-hidden=\"true\"></td>\n\n  <td class=\"action-cell\">\n    <app-button label=\"Consult\" variant=\"primary\" [borderless]=\"true\" (click)=\"handleConsult()\" />\n  </td>\n</tr>\n"
        },
        {
            "name": "TableRowGroupComponent",
            "id": "component-TableRowGroupComponent-4895397fd9da9f433f7c26dd89faa8b8a3258abb5e732a283c9c0ba7bb90d36c1920b6bc6f33dbd6e5c8416232b7c9a27a28a83d91b08907d5b61c3f7ea64bcf",
            "file": "src/app/components/organisms/tableRowGroup/tableRowGroup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table-row-group",
            "styleUrls": [
                "./tableRowGroup.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tableRowGroup.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "rows",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "TableRowData[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "consultClicked",
                    "defaultValue": "new EventEmitter<string | number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowSelected",
                    "defaultValue": "new EventEmitter<{ id: string | number; selected: boolean }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleConsultClick",
                    "args": [
                        {
                            "name": "id",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSelectChange",
                    "args": [
                        {
                            "name": "id",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "checked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "checked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TableRowComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TableRowComponent } from '../../molecules/tableRow/tableRow.component';\n\nexport interface TableRowData {\n  id: number;\n  state: string;\n  fileNumber: number;\n  selected?: boolean;\n}\n\n@Component({\n  selector: 'app-table-row-group',\n  standalone: true,\n  imports: [CommonModule, TableRowComponent],\n  templateUrl: './tableRowGroup.component.html',\n  styleUrls: ['./tableRowGroup.component.scss'],\n})\n\nexport class TableRowGroupComponent {\n\n  // --------------------------- Properties --------------------------\n  // Input properties\n  @Input() rows: TableRowData[] = [];\n\n  // Output properties\n  @Output() rowSelected = new EventEmitter<{ id: string | number; selected: boolean }>();\n  @Output() consultClicked = new EventEmitter<string | number>();\n\n  // --------------------------- Handlers ---------------------------\n\n  handleSelectChange(id: string | number, checked: boolean): void {\n    this.rowSelected.emit({ id, selected: checked });\n  }\n\n  handleConsultClick(id: string | number) {\n    this.consultClicked.emit(id);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".table-row-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n}\r\n",
                    "styleUrl": "./tableRowGroup.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"table-row-group\">\n  <app-table-row\n    *ngFor=\"let row of rows\"\n    [state]=\"row.state\"\n    [fileNumber]=\"row.fileNumber\"\n    [selected]=\"row.selected ?? false\"\n    (selectChange)=\"handleSelectChange(row.id, $event)\"\n    (consult)=\"handleConsultClick(row.id)\"\n  />\n</div>\n"
        },
        {
            "name": "TextComponent",
            "id": "component-TextComponent-e68b14e1fed0708a8d88e6a63cfb048f56eeb3ba09206e7e0ad00d6360a8e54fc562126160de81c2a781de23b8d2ac74bbd6ca47a759d74cede14634f4e00467",
            "file": "src/app/components/atoms/text/text.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-text",
            "styleUrls": [
                "./text.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./text.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "colour",
                    "defaultValue": "'#333'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "content",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'md'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "\"sm\" | \"md\" | \"lg\"",
                    "decorators": []
                },
                {
                    "name": "weight",
                    "defaultValue": "'normal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "\"normal\" | \"medium\" | \"bold\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-text',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './text.component.html',\r\n  styleUrls: ['./text.component.scss'],\r\n})\r\nexport class TextComponent {\r\n\r\n  // --------------------------- Properties --------------------------\r\n  // Input properties\r\n  @Input() content: string = '';\r\n  @Input() size: 'sm' | 'md' | 'lg' = 'md';\r\n  @Input() weight: 'normal' | 'medium' | 'bold' = 'normal';\r\n  @Input() colour: string = '#333';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "span {\r\n  font-family: 'Segoe UI', sans-serif;\r\n\r\n\r\n  &.sm {\r\n    font-size: 0.8rem;\r\n  }\r\n\r\n  &.md {\r\n    font-size: 1rem;\r\n  }\r\n\r\n  &.lg {\r\n    font-size: 2rem;\r\n  }\r\n\r\n  &.normal {\r\n    font-weight: 400;\r\n  }\r\n\r\n  &.medium {\r\n    font-weight: 500;\r\n  }\r\n\r\n  &.bold {\r\n    font-weight: 700;\r\n  }\r\n}\r\n",
                    "styleUrl": "./text.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<span\r\n  [ngClass]=\"[size, weight]\"\r\n  [style.color]=\"colour\"\r\n>\r\n  {{ content }}\r\n</span>\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideBrowserGlobalErrorListeners(),\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes)\r\n  ]\r\n}"
            },
            {
                "name": "nextId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/atoms/checkbox/checkbox.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "SortableKey",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/components/pages/jobDone/jobDone.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 198
            },
            {
                "name": "SortableKey",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/components/pages/mainPage/mainPage.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 198
            },
            {
                "name": "SortDirection",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"asc\" | \"desc\"",
                "file": "src/app/services/tableData.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideBrowserGlobalErrorListeners(),\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes)\r\n  ]\r\n}"
                }
            ],
            "src/app/components/atoms/checkbox/checkbox.component.ts": [
                {
                    "name": "nextId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/atoms/checkbox/checkbox.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/components/pages/jobDone/jobDone.component.ts": [
                {
                    "name": "SortableKey",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/components/pages/jobDone/jobDone.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 198
                }
            ],
            "src/app/components/pages/mainPage/mainPage.component.ts": [
                {
                    "name": "SortableKey",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/components/pages/mainPage/mainPage.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 198
                }
            ],
            "src/app/services/tableData.service.ts": [
                {
                    "name": "SortDirection",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"asc\" | \"desc\"",
                    "file": "src/app/services/tableData.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atoms/badge/badge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BadgeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atoms/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atoms/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atoms/checkbox/checkbox.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nextId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atoms/filterTabButton/filterTabButton.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FilterTabButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atoms/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atoms/text/text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/molecules/actionBar/actionBar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActionBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/molecules/filterTabGroup/filterTabGroup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/molecules/filterTabGroup/filterTabGroup.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FilterTab",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/molecules/navTab/navTab.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavTabComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/molecules/statCard/statCard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/molecules/tableHeader/tableHeader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/molecules/tableRow/tableRow.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableRowComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/organisms/filterActionGroup/filterActionGroup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FilterActionGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/organisms/filterActionGroup/filterActionGroup.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FilterTab",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/organisms/navTabGroup/navTabGroup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavTabGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/organisms/navTabGroup/navTabGroup.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NavTabItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/organisms/statCardGroup/statCardGroup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatCardGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/organisms/statCardGroup/statCardGroup.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StatCardItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/organisms/tableRowGroup/tableRowGroup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableRowGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/organisms/tableRowGroup/tableRowGroup.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableRowData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pages/jobDone/jobDone.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JobDoneComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pages/jobDone/jobDone.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "SortableKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pages/mainPage/mainPage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pages/mainPage/mainPage.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "SortableKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/templates/mainGroup/mainGroup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainGroupTemplateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/services/tableData.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TableDataService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/tableData.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableRow",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/tableData.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "SortDirection",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}